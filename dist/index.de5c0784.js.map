{"mappings":"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","sources":["src/js/index.js"],"sourcesContent":["\r\nclass DrawingBoard {\r\n    MODE = \"NONE\"; //NONE BRUSH ERASER\r\n    IsMouseDown = false; // true false\r\n    eraserColor = \"#FFFFFF\"\r\n    backgroundColor = \"#FFFFFF\"\r\n    IsNavigatorVisible = false;\r\n    undoArray = [];\r\n\r\n    constructor() {\r\n        this.assignElement();\r\n        this.initContext();\r\n        this.initCanvasBackgroundColor();\r\n        this.addEvent();\r\n    }\r\n\r\n        assignElement() {\r\n            this.containerEl = document.getElementById(\"container\");\r\n            this.canvasEl = this.containerEl.querySelector(\"#canvas\");\r\n            this.toolbarEl = this.containerEl.querySelector(\"#toolbar\");\r\n            this.brushEl = this.toolbarEl.querySelector(\"#brush\");\r\n            this.colorPickerEl = this.toolbarEl.querySelector(\"#colorPicker\");\r\n            this.brushPanelEl = this.containerEl.querySelector(\"#brushPanel\");\r\n            this.brushSliderEl = this.brushPanelEl.querySelector(\"#brushSize\");\r\n            this.brushSizePreviewEl = this.brushPanelEl.querySelector(\"#brushSizePreview\");\r\n            this.eraserEl = this.toolbarEl.querySelector(\"#eraser\");\r\n            this.navigatorEl =this.toolbarEl.querySelector(\"#navigator\")\r\n            this.navigatorImageContainerEl = this.containerEl.querySelector(\"#imgNav\");\r\n            this.navigatorImageEl = this.navigatorImageContainerEl.querySelector(\"#canvasImg\");\r\n            this.undoEl = this.toolbarEl.querySelector(\"#undo\")\r\n        }\r\n        initContext() {\r\n            this.context = this.canvasEl.getContext(\"2d\")\r\n        }\r\n        initCanvasBackgroundColor(){\r\n            this.context.fillStyle = this.backgroundColor;\r\n            this.context.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n        }\r\n        addEvent() {\r\n            this.brushEl.addEventListener(\"click\", this.onClickBrush.bind(this));\r\n            this.canvasEl.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\r\n            this.canvasEl.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\r\n            this.canvasEl.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\r\n            this.canvasEl.addEventListener(\"mouseout\",this.onMouseOut.bind(this));\r\n            this.brushSliderEl.addEventListener(\"input\", this.onChangeBrushSize.bind(this));\r\n            this.colorPickerEl.addEventListener(\"input\", this.onChangeColor.bind(this));\r\n            this.eraserEl.addEventListener(\"click\", this.onClickEraser.bind(this));\r\n            this.navigatorEl.addEventListener(\"click\", this.onClickNavigator.bind(this));\r\n            this.undoEl.addEventListener(\"click\", this.onClickUndo.bind(this));\r\n        };\r\n\r\n        onClickUndo(){\r\n            if(this.undoArray.length === 0) {\r\n                alert(\"Save unavailable\")\r\n                return;\r\n            }\r\n            let previousDataUrl = this.undoArray.pop()\r\n            let previousImage = new Image();\r\n            previousImage.onload = () => {\r\n                this.context.clearRect(0,0, this.canvasEl.width, this.canvasEl.height);\r\n                this.context.drawImage(previousImage, \r\n                    0, \r\n                    0, \r\n                    this.canvasEl.width, \r\n                    this.canvasEl.height, \r\n                    0, \r\n                    0, \r\n                    this.canvasEl.width, \r\n                    this.canvasEl.height\r\n                    );\r\n            };\r\n            previousImage.src = previousDataUrl;\r\n        }\r\n\r\n        saveState() {\r\n            if(this.undoArray.length > 4){\r\n                this.undoArray.shift();\r\n                this.undoArray.push(this.canvasEl.toDataURL());\r\n            } else {\r\n                this.undoArray.push(this.canvasEl.toDataURL());\r\n            }\r\n            \r\n        }\r\n\r\n        onClickNavigator(event) {\r\n            this.IsNavigatorVisible = !event.currentTarget.classList.contains(\"active\");\r\n            event.currentTarget.classList.toggle(\"active\");\r\n            this.navigatorImageContainerEl.classList.toggle(\"hide\");\r\n            this.updateNavigator();\r\n        }\r\n\r\n        updateNavigator() {\r\n            if(!this.IsNavigatorVisible) return;\r\n            this.navigatorImageEl.src = this.canvasEl.toDataURL();\r\n        }\r\n\r\n        onClickEraser(event) {\r\n            const IsActive = event.currentTarget.classList.contains(\"active\") \r\n            this.MODE = IsActive ? \"NONE\" : \"ERASER\";\r\n            this.canvasEl.style.cursor = IsActive ? \"default\" : \"crosshair\";\r\n            this.brushPanelEl.classList.add(\"hide\");\r\n            event.currentTarget.classList.toggle(\"active\");\r\n            this.brushEl.classList.remove(\"active\");\r\n        }\r\n\r\n        onMouseOut() {\r\n            if (this.MODE === \"NONE\") return;\r\n            this.IsMouseDown = false;\r\n            this.updateNavigator();\r\n        }\r\n\r\n        onChangeColor(event) {\r\n            this.brushSizePreviewEl.style.background = event.target.value;\r\n        }\r\n        \r\n\r\n        onChangeBrushSize(event){\r\n            this.brushSizePreviewEl.style.width = `${event.target.value}px`\r\n            this.brushSizePreviewEl.style.height = `${event.target.value}px`\r\n        }\r\n\r\n        onMouseDown(event) {\r\n            if(this.MODE === \"NONE\") return;\r\n            this.IsMouseDown = true;\r\n            const currentPosition = this.getMousePosition(event);\r\n            this.context.beginPath();\r\n            this.context.moveTo(currentPosition.x, currentPosition.y);\r\n            this.context.lineCap = \"round\";\r\n            if(this.MODE === \"BRUSH\") {\r\n                this.context.strokeStyle = this.colorPickerEl.value;\r\n                this.context.lineWidth = this.brushSliderEl.value;\r\n            } else if (this.MODE === \"ERASER\") {\r\n                this.context.strokeStyle = this.eraserColor;\r\n                this.context.lineWidth = 50;\r\n            }\r\n            this.saveState();\r\n            // this.context.lineTo(400, 400);\r\n            // this.context.stroke();\r\n        }\r\n\r\n        onMouseMove(event){\r\n            if (!this.IsMouseDown) return;\r\n            const currentPosition = this.getMousePosition(event);\r\n            this.context.lineTo(currentPosition.x, currentPosition.y);\r\n            this.context.stroke();\r\n\r\n        }\r\n\r\n        onMouseUp() {\r\n            if(this.MODE === \"NONE\") return;\r\n            this.IsMouseDown = false;\r\n            this.updateNavigator();\r\n        }\r\n\r\n        getMousePosition(event){\r\n            const boundaries = this.canvasEl.getBoundingClientRect();\r\n            return {\r\n                x: event.clientX - boundaries.left,\r\n                y: event.clientY - boundaries.top,\r\n            };\r\n        }\r\n\r\n        onClickBrush(event){\r\n            const IsActive = event.currentTarget.classList.contains(\"active\") \r\n            this.MODE = IsActive ? \"NONE\" : \"BRUSH\";\r\n            this.canvasEl.style.cursor = IsActive ? \"default\" : \"crosshair\";\r\n            this.brushPanelEl.classList.toggle(\"hide\");\r\n            event.currentTarget.classList.toggle(\"active\");\r\n            this.eraserEl.classList.remove(\"active\");\r\n        }\r\n    \r\n}\r\n\r\nnew DrawingBoard();"],"names":[],"version":3,"file":"index.de5c0784.js.map","sourceRoot":"/__parcel_source_root/"}
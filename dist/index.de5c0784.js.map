{"mappings":"AACA,MAAM;IACF,OAAO,OAAO;IACd,cAAc,MAAM;IACpB,aAAc;QACV,IAAI,CAAC;QACL,IAAI,CAAC;QACL,IAAI,CAAC;IACT;IAEI,gBAAgB;QACZ,IAAI,CAAC,cAAc,SAAS,eAAe;QAC3C,IAAI,CAAC,WAAW,IAAI,CAAC,YAAY,cAAc;QAC/C,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,cAAc;QAChD,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,cAAc;QAC5C,IAAI,CAAC,gBAAgB,IAAI,CAAC,UAAU,cAAc;QAClD,IAAI,CAAC,eAAe,IAAI,CAAC,YAAY,cAAc;IAEvD;IACA,cAAc;QACV,IAAI,CAAC,UAAU,IAAI,CAAC,SAAS,WAAW;IAC5C;IACA,WAAW;QACP,IAAI,CAAC,QAAQ,iBAAiB,SAAS,IAAI,CAAC,aAAa,KAAK,IAAI;QAClE,IAAI,CAAC,SAAS,iBAAiB,aAAa,IAAI,CAAC,YAAY,KAAK,IAAI;QACtE,IAAI,CAAC,SAAS,iBAAiB,aAAa,IAAI,CAAC,YAAY,KAAK,IAAI;QACtE,IAAI,CAAC,SAAS,iBAAiB,WAAW,IAAI,CAAC,UAAU,KAAK,IAAI;IAEtE;IAEA,YAAY,KAAK,EAAE;QACf,IAAG,IAAI,CAAC,SAAS,QAAQ;QACzB,IAAI,CAAC,cAAc;QACnB,MAAM,kBAAkB,IAAI,CAAC,iBAAiB;QAC9C,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,QAAQ,OAAO,gBAAgB,GAAG,gBAAgB;QACvD,IAAI,CAAC,QAAQ,UAAU;QACvB,IAAI,CAAC,QAAQ,cAAc,IAAI,CAAC,cAAc;QAC9C,IAAI,CAAC,QAAQ,YAAY;IACzB,iCAAiC;IACjC,yBAAyB;IAC7B;IAEA,YAAY,KAAK,EAAC;QACd,IAAI,CAAC,IAAI,CAAC,aAAa;QACvB,MAAM,kBAAkB,IAAI,CAAC,iBAAiB;QAC9C,IAAI,CAAC,QAAQ,OAAO,gBAAgB,GAAG,gBAAgB;QACvD,IAAI,CAAC,QAAQ;IAEjB;IAEA,YAAY;QACR,IAAG,IAAI,CAAC,SAAS,QAAQ;QACzB,IAAI,CAAC,cAAc;IAEvB;IAEA,iBAAiB,KAAK,EAAC;QACnB,MAAM,aAAa,IAAI,CAAC,SAAS;QACjC,OAAO;YACH,GAAG,MAAM,UAAU,WAAW;YAC9B,GAAG,MAAM,UAAU,WAAW;QAClC;IACJ;IAEA,aAAa,KAAK,EAAC;QACf,MAAM,WAAW,MAAM,cAAc,UAAU,SAAS;QACxD,IAAI,CAAC,OAAO,WACV,SACA;QACF,IAAI,CAAC,SAAS,MAAM,SAAS,WAC3B,YACA;QACF,IAAI,CAAC,aAAa,UAAU,OAAO;QACnC,IAAI,CAAC,QAAQ,UAAU,OAAO;IAClC;AAER;AAEA,IAAI","sources":["src/js/index.js"],"sourcesContent":["\r\nclass DrawingBoard {\r\n    MODE = \"NONE\"; //NONE BRUSH ERASER\r\n    IsMouseDown = false; // true false\r\n    constructor() {\r\n        this.assignElement();\r\n        this.initContext();\r\n        this.addEvent();\r\n    }\r\n\r\n        assignElement() {\r\n            this.containerEl = document.getElementById(\"container\");\r\n            this.canvasEl = this.containerEl.querySelector(\"#canvas\");\r\n            this.toolbarEl = this.containerEl.querySelector(\"#toolbar\");\r\n            this.brushEl = this.toolbarEl.querySelector(\"#brush\");\r\n            this.colorPickerEl = this.toolbarEl.querySelector(\"#colorPicker\")\r\n            this.brushPanelEl = this.containerEl.querySelector(\"#brushPanel\");\r\n\r\n        }\r\n        initContext() {\r\n            this.context = this.canvasEl.getContext(\"2d\")\r\n        }\r\n        addEvent() {\r\n            this.brushEl.addEventListener(\"click\", this.onClickBrush.bind(this));\r\n            this.canvasEl.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\r\n            this.canvasEl.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\r\n            this.canvasEl.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\r\n\r\n        }\r\n\r\n        onMouseDown(event) {\r\n            if(this.MODE === \"NONE\") return;\r\n            this.IsMouseDown = true;\r\n            const currentPosition = this.getMousePosition(event);\r\n            this.context.beginPath();\r\n            this.context.moveTo(currentPosition.x, currentPosition.y);\r\n            this.context.lineCap = \"round\";\r\n            this.context.strokeStyle = this.colorPickerEl.value;\r\n            this.context.lineWidth = 10;\r\n            // this.context.lineTo(400, 400);\r\n            // this.context.stroke();\r\n        }\r\n\r\n        onMouseMove(event){\r\n            if (!this.IsMouseDown) return;\r\n            const currentPosition = this.getMousePosition(event);\r\n            this.context.lineTo(currentPosition.x, currentPosition.y);\r\n            this.context.stroke();\r\n\r\n        }\r\n\r\n        onMouseUp() {\r\n            if(this.MODE === \"NONE\") return;\r\n            this.IsMouseDown = false;\r\n\r\n        }\r\n\r\n        getMousePosition(event){\r\n            const boundaries = this.canvasEl.getBoundingClientRect();\r\n            return {\r\n                x: event.clientX - boundaries.left,\r\n                y: event.clientY - boundaries.top,\r\n            };\r\n        }\r\n\r\n        onClickBrush(event){\r\n            const IsActive = event.currentTarget.classList.contains(\"active\") \r\n            this.MODE = IsActive\r\n            ? \"NONE\" \r\n            : \"BRUSH\";\r\n            this.canvasEl.style.cursor = IsActive\r\n            ? \"default\"\r\n            : \"crosshair\";\r\n            this.brushPanelEl.classList.toggle(\"hide\");\r\n            this.brushEl.classList.toggle(\"active\");\r\n        }\r\n    \r\n}\r\n\r\nnew DrawingBoard();"],"names":[],"version":3,"file":"index.de5c0784.js.map","sourceRoot":"/__parcel_source_root/"}